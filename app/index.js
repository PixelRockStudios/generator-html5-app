// Generated by CoffeeScript 1.8.0

/*
	generator-html5-app

	index.coffee

	@author Sean Goresht
	
	@note Created on 5/12/2014 by PhpStorm
	@note uses Codoc
	@see https://github.com/coffeedoc/codo
 */

(function() {
  "use strict";
  var Html5AppGenerator, chalk, path, yeoman, yosay,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  yeoman = require("yeoman-generator");

  chalk = require("chalk");

  yosay = require("yosay");

  path = require("path");

  module.exports = Html5AppGenerator = (function(_super) {
    __extends(Html5AppGenerator, _super);

    function Html5AppGenerator() {
      return Html5AppGenerator.__super__.constructor.apply(this, arguments);
    }

    Html5AppGenerator.prototype.initializing = function() {
      this.argument("name", {
        type: String,
        required: false
      });
      this.appname = this.name || path.basename(process.cwd());
      this.appname = this._.camelize(this._.slugify(this._.humanize(this.appname)));
      this.appPath = this.env.options.appPath;
      return this.pkg = require("../package.json");
    };

    Html5AppGenerator.prototype.prompting = function() {
      var done, prompts;
      done = this.async();
      console.log(yosay("Welcome to the " + (chalk.red("HTML5 App")) + " generator"));
      prompts = [
        {
          name: "appname",
          message: "What's the name of your app?",
          "default": this.appname
        }, {
          type: "list",
          name: "script",
          "default": 1,
          message: "What would you like to write scripts with?",
          choices: ["JavaScript", "CoffeeScript"],
          filter: function(val) {
            var filterMap;
            filterMap = {
              JavaScript: "js",
              CoffeeScript: "coffee"
            };
            return filterMap[val];
          }
        }, {
          type: "list",
          name: "markup",
          message: "What would you like to write markup with?",
          "default": 1,
          choices: ["HTML", "Jade"],
          filter: function(val) {
            return val.toLowerCase();
          }
        }, {
          type: "list",
          name: "build",
          message: "Which build tool do you want to use?",
          "default": 1,
          choices: ["Gulp", "Grunt"],
          filter: function(val) {
            return val.toLowerCase();
          }
        }, {
          type: "list",
          name: "testFramework",
          "default": 1,
          message: "Which testing framework do you want to use?",
          choices: ["Mocha", "Jasmine", "QUnit"],
          filter: function(val) {
            return val.toLowerCase();
          }
        }, {
          type: "list",
          name: "stylesheet",
          "default": 3,
          message: "What would you like to write stylesheets with?",
          choices: ["CSS", "Sass", "Stylus"],
          filter: function(val) {
            return val.toLowerCase();
          }
        }, {
          type: "confirm",
          name: "includejQuery",
          "default": true,
          message: "Use jQuery?"
        }, {
          name: "description",
          message: "Describe your app",
          "default": "A sample description"
        }, {
          name: "authorName",
          message: "What's your name?",
          "default": "Author name"
        }, {
          name: "authorEmail",
          message: "What's your e-mail?",
          "default": "email@somedomain.com"
        }, {
          name: "authorURL",
          message: "What's your website?",
          "default": "somedomain.com"
        }, {
          name: "license",
          message: "What's the copyright license?",
          "default": "MIT"
        }
      ];
      return this.prompt(prompts, (function(answers) {
        this.description = answers.description;
        this.appname = answers.appname;
        this.script = answers.script;
        this.coffee = answers.script === "coffee";
        this.stylesheet = answers.stylesheet;
        this.markup = answers.markup;
        this.testFramework = answers.testFramework;
        this.authorName = answers.authorName;
        this.authorEmail = answers.authorEmail;
        this.authorURL = answers.authorURL;
        this.build = answers.build;
        this.grunt = answers.build === "grunt";
        this.gulp = answers.build === "gulp";
        this.license = answers.license;
        this.includeCompass = answers.styleSheet === "sass";
        this.includeModernizr = answers.includeModernizr;
        this.includejQuery = answers.includejQuery;
        this.testFramework = answers.testFramework;
        this.currentDate = new Date().getUTCDate();
        this.answers = answers;
        console.log("Saved yeoman config with");
        console.dir(answers);
        return done();
      }).bind(this));
    };

    Html5AppGenerator.prototype.config = function() {
      this.config.set("stylesheet", "css");
      this.config.set(this.answers);
      return this.config.save();
    };

    Html5AppGenerator.prototype.writing = {
      projectConfigFiles: function() {
        var dotFiles, file, _i, _len;
        this.template("_bower.json", "bower.json");
        this.template("_package.json", "package.json");
        dotFiles = ["gitignore", "bowerrc", "editorconfig", "gitattributes", "htaccess", "jshintrc"];
        for (_i = 0, _len = dotFiles.length; _i < _len; _i++) {
          file = dotFiles[_i];
          this.copy(file, "." + file);
        }
        return {
          taskRunnerFiles: function() {
            return this.template("_gulpfile.js", "gulpfile.js");
          }
        };
      },
      htmlFiles: function() {
        var browserFiles, file, _i, _len, _results;
        this.template("_index.html", "index.html");
        browserFiles = ["crossdomain.xml", "browserconfig.xml", "apple-touch-icon-precomposed.png", "humans.txt", "robots.txt", "tile.png", "tile-wide.png"];
        _results = [];
        for (_i = 0, _len = browserFiles.length; _i < _len; _i++) {
          file = browserFiles[_i];
          _results.push(this.copy(file, file));
        }
        return _results;
      },
      styles: function() {
        switch (this.stylesheet) {
          case "sass":
            this.mkdir("styles/partials");
            this.template("styles/partials/_variables.scss", "styles/partials/_variables.scss");
            this.template("styles/partials/_helpers.scss", "styles/partials/_helpers.scss");
            this.template("styles/partials/_media-queries.scss", "styles/partials/_media-queries.scss");
            return this.template("styles/sass/_main.scss", "styles/main.scss");
          case "stylus":
            return this.template("styles/stylus/_main.styl", "styles/main.styl");
          case "css":
            return this.template("styles/css/_main.css", "styles/main.css");
        }
      },
      assetDirs: function() {
        var directory, emptyDirectories, _i, _len, _results;
        emptyDirectories = ["img", "fonts"];
        _results = [];
        for (_i = 0, _len = emptyDirectories.length; _i < _len; _i++) {
          directory = emptyDirectories[_i];
          _results.push(this.mkdir(directory));
        }
        return _results;
      },
      generateScripts: function() {
        switch (this.script) {
          case "coffee":
            return this.template("scripts/_main.coffee", "scripts/main.coffee");
          default:
            return this.template("scripts/_main.js", "scripts/main.js");
        }
      }
    };

    return Html5AppGenerator;

  })(yeoman.generators.Base);

}).call(this);

//# sourceMappingURL=index.js.map
